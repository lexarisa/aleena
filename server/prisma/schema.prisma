// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgres://efvubjdgccjxji:db21c7c801dde62acf6ea5de475602884e310f0101d5d8db07f5d0cee096124b@ec2-44-199-143-43.compute-1.amazonaws.com:5432/dfsrjkkvo1pbpk"
  shadowDatabaseUrl = "postgres://ittgxvahaxzglh:f95d120c9310f8d17a06e813fed36b4cab4b8362ae5f9a41ade9aaca0e7aa477@ec2-35-168-194-15.compute-1.amazonaws.com:5432/d4nv0h451ir1jf"
}

model User {
  id Int @id
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
  email String? @unique
  username String @unique
  name String?
  slack_id String? @unique
  profile_pic String 
  status String? 
  tasks User_Tasks[]
  comments Comment[]
  projects User_Projects[]
  articles Article[]
}

model Project {
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt
  title String
  description String?
  status String?
  deadline DateTime? 
  user User_Projects[]
  milestones Milestone[]
}

model User_Projects {
  id Int @id @default(autoincrement())
  user_id Int
  project_id Int
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  project Project @relation(fields: [project_id], references: [id], onDelete: Cascade)
}

model User_Tasks {
  id Int @id @default(autoincrement())
  user_id Int
  task_id Int
  subscribed Boolean?
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  task Task @relation(fields: [task_id], references: [id], onDelete: Cascade)
}
model Milestone {
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt
  title String
  status String?
  project_id Int
  project Project @relation(fields: [project_id], references: [id], onDelete: Cascade)
  tasks Task[]
  documents Documentation[]
}

model Task {
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt
  title String
  description String?
  status String?
  deadline DateTime?
  user_id Int 
  project_id Int
  milestone_id Int
  priority String?
  milestone Milestone @relation(fields: [milestone_id], references: [id], onDelete: Cascade)
  comments Comment[]
  users User_Tasks[]
  tags Tag[]
  githubs Github[]
}

model Comment {
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt
  description String
  user_id Int
  task_id Int
  user User @relation(fields:[user_id], references: [id], onDelete: Cascade)
  task Task @relation(fields: [task_id], references: [id], onDelete: Cascade)
}

model Documentation {
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  title String
  milestone_id Int
  milestone Milestone @relation(fields: [milestone_id], references: [id], onDelete: Cascade)
  articles Article[]
}

model Article {
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt
  user_id Int?
  title String 
  content String?
  user User? @relation(fields: [user_id], references: [id])
  documentation_id Int 
  documentation Documentation @relation(fields: [documentation_id], references: [id], onDelete: Cascade)
}

model Github {
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt
  number Int
  task_id Int
  pull_id Int @unique
  sender String
  sender_id Int
  repo_url String
  title String
  status String
  pull_url String
  comment String?
  task Task @relation(fields: [task_id], references: [id], onDelete: Cascade)
}

model Tag {
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime? @updatedAt
  color String
  label String
  task_id Int
  task Task @relation(fields: [task_id], references: [id], onDelete: Cascade)
}

model Feed {
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  pull_id Int @unique
  sender String
  sender_id Int
  repo_url String
  title String
  status String
  number Int
  pull_url String
  comment String?
}
