highWaterMark: 16384,
buffer: BufferList { head: null, tail: null, length: 0 },
length: 0,
pipes: [],
flowing: true,
ended: true,
endEmitted: true,
reading: false,
constructed: true,
sync: false,
needReadable: false,
emittedReadable: false,
readableListening: false,
resumeScheduled: false,
errorEmitted: false,
emitClose: true,
autoDestroy: true,
destroyed: false,
errored: null,
closed: false,
closeEmitted: false,
defaultEncoding: 'utf8',
awaitDrainWriters: null,
multiAwaitDrain: false,
readingMore: false,
dataEmitted: true,
decoder: null,
encoding: null,
[Symbol(kPaused)]: false
},
_events: [Object: null prototype] { end: [Function: clearRequestTimeout] },
_eventsCount: 1,
_maxListeners: undefined,
socket: <ref *1> Socket {
connecting: false,
_hadError: false,
_parent: null,
_host: null,
_readableState: ReadableState {
objectMode: false,
highWaterMark: 16384,
buffer: BufferList { head: null, tail: null, length: 0 },
length: 0,
pipes: [],
flowing: true,
ended: false,
endEmitted: false,
reading: true,
constructed: true,
sync: false,
needReadable: true,
emittedReadable: false,
readableListening: false,
resumeScheduled: false,
errorEmitted: false,
emitClose: false,
autoDestroy: true,
destroyed: false,
errored: null,
closed: false,
closeEmitted: false,
defaultEncoding: 'utf8',
awaitDrainWriters: null,
multiAwaitDrain: false,
readingMore: false,
dataEmitted: false,
decoder: null,
encoding: null,
[Symbol(kPaused)]: false
},
_events: [Object: null prototype] {
end: [Array],
timeout: [Function: socketOnTimeout],
data: [Function: bound socketOnData],
error: [Function: socketOnError],
close: [Array],
drain: [Function: bound socketOnDrain],
resume: [Function: onSocketResume],
pause: [Function: onSocketPause]
},
_eventsCount: 8,
_maxListeners: undefined,
_writableState: WritableState {
objectMode: false,
highWaterMark: 16384,
finalCalled: false,
needDrain: false,
ending: false,
ended: false,
finished: false,
destroyed: false,
decodeStrings: false,
defaultEncoding: 'utf8',
length: 0,
writing: false,
corked: 0,
sync: true,
bufferProcessing: false,
onwrite: [Function: bound onwrite],
writecb: null,
writelen: 0,
afterWriteTickInfo: null,
buffered: [],
bufferedIndex: 0,
allBuffers: true,
allNoop: true,
pendingcb: 0,
constructed: true,
prefinished: false,
errorEmitted: false,
emitClose: false,
autoDestroy: true,
errored: null,
closed: false,
closeEmitted: false,
[Symbol(kOnFinished)]: []
},
allowHalfOpen: true,
_sockname: null,
_pendingData: null,
_pendingEncoding: '',
server: Server {
maxHeaderSize: undefined,
insecureHTTPParser: undefined,
_events: [Object: null prototype],
_eventsCount: 2,
_maxListeners: undefined,
_connections: 1,
_handle: [TCP],
_usingWorkers: false,
_workers: [],
_unref: false,
allowHalfOpen: true,
pauseOnConnect: false,
noDelay: false,
keepAlive: false,
keepAliveInitialDelay: 0,
httpAllowHalfOpen: false,
timeout: 0,
keepAliveTimeout: 5000,
maxHeadersCount: null,
maxRequestsPerSocket: 0,
headersTimeout: 60000,
requestTimeout: 0,
_connectionKey: '6::::3001',
[Symbol(IncomingMessage)]: [Function: IncomingMessage],
[Symbol(ServerResponse)]: [Function: ServerResponse],
[Symbol(kCapture)]: false,
[Symbol(async_id_symbol)]: 5
},
_server: Server {
maxHeaderSize: undefined,
insecureHTTPParser: undefined,
_events: [Object: null prototype],
_eventsCount: 2,
_maxListeners: undefined,
_connections: 1,
_handle: [TCP],
_usingWorkers: false,
_workers: [],
_unref: false,
allowHalfOpen: true,
pauseOnConnect: false,
noDelay: false,
keepAlive: false,
keepAliveInitialDelay: 0,
httpAllowHalfOpen: false,
timeout: 0,
keepAliveTimeout: 5000,
maxHeadersCount: null,
maxRequestsPerSocket: 0,
headersTimeout: 60000,
requestTimeout: 0,
_connectionKey: '6::::3001',
[Symbol(IncomingMessage)]: [Function: IncomingMessage],
[Symbol(ServerResponse)]: [Function: ServerResponse],
[Symbol(kCapture)]: false,
[Symbol(async_id_symbol)]: 5
},
parser: HTTPParser {
'0': [Function: bound setRequestTimeout],
'1': [Function: parserOnHeaders],
'2': [Function: parserOnHeadersComplete],
'3': [Function: parserOnBody],
'4': [Function: parserOnMessageComplete],
'5': [Function: bound onParserExecute],
'6': [Function: bound onParserTimeout],
_headers: [],
_url: '',
socket: [Circular *1],
incoming: [Circular *2],
outgoing: null,
maxHeaderPairs: 2000,
_consumed: true,
onIncoming: [Function: bound parserOnIncoming],
[Symbol(resource_symbol)]: [HTTPServerAsyncResource]
},
on: [Function: socketListenerWrap],
addListener: [Function: socketListenerWrap],
prependListener: [Function: socketListenerWrap],
setEncoding: [Function: socketSetEncoding],
_paused: false,
_httpMessage: ServerResponse {
_events: [Object: null prototype],
_eventsCount: 1,
_maxListeners: undefined,
outputData: [],
outputSize: 0,
writable: true,
destroyed: false,
_last: false,
chunkedEncoding: false,
shouldKeepAlive: true,
maxRequestsOnConnectionReached: false,
_defaultKeepAlive: true,
useChunkedEncodingByDefault: true,
sendDate: true,
_removedConnection: false,
_removedContLen: false,
_removedTE: false,
_contentLength: null,
_hasBody: true,
_trailer: '',
finished: false,
_headerSent: false,
_closed: false,
socket: [Circular *1],
_header: null,
_keepAliveTimeout: 5000,
_onPendingData: [Function: bound updateOutgoingData],
req: [Circular 2],
_sent100: false,
_expect_continue: false,
locals: [Object: null prototype] {},
[Symbol(kCapture)]: false,
[Symbol(kNeedDrain)]: false,
[Symbol(corked)]: 0,
[Symbol(kOutHeaders)]: [Object: null prototype]
},
[Symbol(async_id_symbol)]: 8,
[Symbol(kHandle)]: TCP {
reading: true,
onconnection: null,
_consumed: true,
[Symbol(owner_symbol)]: [Circular 1]
},
[Symbol(lastWriteQueueSize)]: 0,
[Symbol(timeout)]: null,
[Symbol(kBuffer)]: null,
[Symbol(kBufferCb)]: null,
[Symbol(kBufferGen)]: null,
[Symbol(kCapture)]: false,
[Symbol(kSetNoDelay)]: false,
[Symbol(kSetKeepAlive)]: false,
[Symbol(kSetKeepAliveInitialDelay)]: 0,
[Symbol(kBytesRead)]: 0,
[Symbol(kBytesWritten)]: 0,
[Symbol(RequestTimeout)]: undefined
},
httpVersionMajor: 1,
httpVersionMinor: 1,
httpVersion: '1.1',
complete: true,
rawHeaders: [
'Host',
'dcb2-45-130-134-153.eu.ngrok.io',
'User-Agent',
'GitHub-Hookshot/db1e1da',
'Content-Length',
'6071',
'Accept',
'/',
'Content-Type',
'application/json',
'X-Forwarded-For',
'140.82.115.117',
'X-Forwarded-Proto',
'https',
'X-Github-Delivery',
'caaa0ca0-d04c-11ec-8a4e-92d603296d0c',
'X-Github-Event',
'push',
'X-Github-Hook-Id',
'357008294',
'X-Github-Hook-Installation-Target-Id',
'198267',
'X-Github-Hook-Installation-Target-Type',
'integration',
'X-Hub-Signature',
'sha1=54d38374e0aeebe36e8e5169474ce52e0cf2a2e4',
'X-Hub-Signature-256',
'sha256=eafd6f334631e30bc442440c5ebc7e8952aaf9705eebe5cea03baebb45ef6c73',
'Accept-Encoding',
'gzip'
],
rawTrailers: [],
aborted: false,
upgrade: false,
url: '/payload',
method: 'POST',
statusCode: null,
statusMessage: null,
client: <ref *1> Socket {
connecting: false,
_hadError: false,
_parent: null,
_host: null,
_readableState: ReadableState {
objectMode: false,
highWaterMark: 16384,
buffer: BufferList { head: null, tail: null, length: 0 },
length: 0,
pipes: [],
flowing: true,
ended: false,
endEmitted: false,
reading: true,
constructed: true,
sync: false,
needReadable: true,
emittedReadable: false,
readableListening: false,
resumeScheduled: false,
errorEmitted: false,
emitClose: false,
autoDestroy: true,
destroyed: false,
errored: null,
closed: false,
closeEmitted: false,
defaultEncoding: 'utf8',
awaitDrainWriters: null,
multiAwaitDrain: false,
readingMore: false,
dataEmitted: false,
decoder: null,
encoding: null,
[Symbol(kPaused)]: false
},
_events: [Object: null prototype] {
end: [Array],
timeout: [Function: socketOnTimeout],
data: [Function: bound socketOnData],
error: [Function: socketOnError],
close: [Array],
drain: [Function: bound socketOnDrain],
resume: [Function: onSocketResume],
pause: [Function: onSocketPause]
},
_eventsCount: 8,
_maxListeners: undefined,
_writableState: WritableState {
objectMode: false,
highWaterMark: 16384,
finalCalled: false,
needDrain: false,
ending: false,
ended: false,
finished: false,
destroyed: false,
decodeStrings: false,
defaultEncoding: 'utf8',
length: 0,
writing: false,
corked: 0,
sync: true,
bufferProcessing: false,
onwrite: [Function: bound onwrite],
writecb: null,
writelen: 0,
afterWriteTickInfo: null,
buffered: [],
bufferedIndex: 0,
allBuffers: true,
allNoop: true,
pendingcb: 0,
constructed: true,
prefinished: false,
errorEmitted: false,
emitClose: false,
autoDestroy: true,
errored: null,
closed: false,
closeEmitted: false,
[Symbol(kOnFinished)]: []
},
allowHalfOpen: true,
_sockname: null,
_pendingData: null,
_pendingEncoding: '',
server: Server {
maxHeaderSize: undefined,
insecureHTTPParser: undefined,
_events: [Object: null prototype],
_eventsCount: 2,
_maxListeners: undefined,
_connections: 1,
_handle: [TCP],
_usingWorkers: false,
_workers: [],
_unref: false,
allowHalfOpen: true,
pauseOnConnect: false,
noDelay: false,
keepAlive: false,
keepAliveInitialDelay: 0,
httpAllowHalfOpen: false,
timeout: 0,
keepAliveTimeout: 5000,
maxHeadersCount: null,
maxRequestsPerSocket: 0,
headersTimeout: 60000,
requestTimeout: 0,
_connectionKey: '6::::3001',
[Symbol(IncomingMessage)]: [Function: IncomingMessage],
[Symbol(ServerResponse)]: [Function: ServerResponse],
[Symbol(kCapture)]: false,
[Symbol(async_id_symbol)]: 5
},
_server: Server {
maxHeaderSize: undefined,
insecureHTTPParser: undefined,
_events: [Object: null prototype],
_eventsCount: 2,
_maxListeners: undefined,
_connections: 1,
_handle: [TCP],
_usingWorkers: false,
_workers: [],
_unref: false,
allowHalfOpen: true,
pauseOnConnect: false,
noDelay: false,
keepAlive: false,
keepAliveInitialDelay: 0,
httpAllowHalfOpen: false,
timeout: 0,
keepAliveTimeout: 5000,
maxHeadersCount: null,
maxRequestsPerSocket: 0,
headersTimeout: 60000,
requestTimeout: 0,
_connectionKey: '6::::3001',
[Symbol(IncomingMessage)]: [Function: IncomingMessage],
[Symbol(ServerResponse)]: [Function: ServerResponse],
[Symbol(kCapture)]: false,
[Symbol(async_id_symbol)]: 5
},
parser: HTTPParser {
'0': [Function: bound setRequestTimeout],
'1': [Function: parserOnHeaders],
'2': [Function: parserOnHeadersComplete],
'3': [Function: parserOnBody],
'4': [Function: parserOnMessageComplete],
'5': [Function: bound onParserExecute],
'6': [Function: bound onParserTimeout],
_headers: [],
_url: '',
socket: [Circular *1],
incoming: [Circular *2],
outgoing: null,
maxHeaderPairs: 2000,
_consumed: true,
onIncoming: [Function: bound parserOnIncoming],
[Symbol(resource_symbol)]: [HTTPServerAsyncResource]
},
on: [Function: socketListenerWrap],
addListener: [Function: socketListenerWrap],
prependListener: [Function: socketListenerWrap],
setEncoding: [Function: socketSetEncoding],
_paused: false,
_httpMessage: ServerResponse {
_events: [Object: null prototype],
_eventsCount: 1,
_maxListeners: undefined,
outputData: [],
outputSize: 0,
writable: true,
destroyed: false,
_last: false,
chunkedEncoding: false,
shouldKeepAlive: true,
maxRequestsOnConnectionReached: false,
_defaultKeepAlive: true,
useChunkedEncodingByDefault: true,
sendDate: true,
_removedConnection: false,
_removedContLen: false,
_removedTE: false,
_contentLength: null,
_hasBody: true,
_trailer: '',
finished: false,
_headerSent: false,
_closed: false,
socket: [Circular *1],
_header: null,
_keepAliveTimeout: 5000,
_onPendingData: [Function: bound updateOutgoingData],
req: [Circular *2],
_sent100: false,
_expect_continue: false,
locals: [Object: null prototype] {},
[Symbol(kCapture)]: false,
[Symbol(kNeedDrain)]: false,
[Symbol(corked)]: 0,
[Symbol(kOutHeaders)]: [Object: null prototype]
},
[Symbol(async_id_symbol)]: 8,
[Symbol(kHandle)]: TCP {
reading: true,
onconnection: null,
_consumed: true,
[Symbol(owner_symbol)]: [Circular *1]
},
[Symbol(lastWriteQueueSize)]: 0,
[Symbol(timeout)]: null,
[Symbol(kBuffer)]: null,
[Symbol(kBufferCb)]: null,
[Symbol(kBufferGen)]: null,
[Symbol(kCapture)]: false,
[Symbol(kSetNoDelay)]: false,
[Symbol(kSetKeepAlive)]: false,
[Symbol(kSetKeepAliveInitialDelay)]: 0,
[Symbol(kBytesRead)]: 0,
[Symbol(kBytesWritten)]: 0,
[Symbol(RequestTimeout)]: undefined
},
_consuming: true,
_dumped: false,
next: [Function: next],
baseUrl: '',
originalUrl: '/payload',
_parsedUrl: Url {
protocol: null,
slashes: null,
auth: null,
host: null,
port: null,
hostname: null,
hash: null,
search: null,
query: null,
pathname: '/payload',
path: '/payload',
href: '/payload',
_raw: '/payload'
},
params: {},
query: {},

/// heeeeeeeereeeee

res: <ref *3> ServerResponse {
_events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
_eventsCount: 1,
_maxListeners: undefined,
outputData: [],
outputSize: 0,
writable: true,
destroyed: false,
_last: false,
chunkedEncoding: false,
shouldKeepAlive: true,
maxRequestsOnConnectionReached: false,
_defaultKeepAlive: true,
useChunkedEncodingByDefault: true,
sendDate: true,
_removedConnection: false,
_removedContLen: false,
_removedTE: false,
_contentLength: null,
_hasBody: true,
_trailer: '',
finished: false,
_headerSent: false,
_closed: false,
socket: <ref *1> Socket {
connecting: false,
_hadError: false,
_parent: null,
_host: null,
_readableState: [ReadableState],
_events: [Object: null prototype],
_eventsCount: 8,
_maxListeners: undefined,
_writableState: [WritableState],
allowHalfOpen: true,
_sockname: null,
_pendingData: null,
_pendingEncoding: '',
server: [Server],
_server: [Server],
parser: [HTTPParser],
on: [Function: socketListenerWrap],
addListener: [Function: socketListenerWrap],
prependListener: [Function: socketListenerWrap],
setEncoding: [Function: socketSetEncoding],
_paused: false,
_httpMessage: [Circular 3],
[Symbol(async_id_symbol)]: 8,
[Symbol(kHandle)]: [TCP],
[Symbol(lastWriteQueueSize)]: 0,
[Symbol(timeout)]: null,
[Symbol(kBuffer)]: null,
[Symbol(kBufferCb)]: null,
[Symbol(kBufferGen)]: null,
[Symbol(kCapture)]: false,
[Symbol(kSetNoDelay)]: false,
[Symbol(kSetKeepAlive)]: false,
[Symbol(kSetKeepAliveInitialDelay)]: 0,
[Symbol(kBytesRead)]: 0,
[Symbol(kBytesWritten)]: 0,
[Symbol(RequestTimeout)]: undefined
},
_header: null,
_keepAliveTimeout: 5000,
_onPendingData: [Function: bound updateOutgoingData],
req: [Circular 2],
_sent100: false,
_expect_continue: false,
locals: [Object: null prototype] {},
[Symbol(kCapture)]: false,
[Symbol(kNeedDrain)]: false,
[Symbol(corked)]: 0,
[Symbol(kOutHeaders)]: [Object: null prototype] {
'x-powered-by': [Array],
'access-control-allow-origin': [Array]
}
},




/// infoooooo hereeee


body: {
ref: 'refs/heads/custom-server',
before: 'eba951ff7be6c7e6427a30dd4148a91f20bfccc5',
after: '0000000000000000000000000000000000000000',
repository: {
id: 489062066,
node_id: 'R_kgDOHSZ-sg',
name: 'alena',
full_name: 'lexarisa/alena',
private: false,
owner: [Object],
html_url: 'https://github.com/lexarisa/alena',
description: null,
fork: false,
url: 'https://github.com/lexarisa/alena',
forks_url: 'https://api.github.com/repos/lexarisa/alena/forks',
keys_url: 'https://api.github.com/repos/lexarisa/alena/keys{/key_id}',
collaborators_url: 'https://api.github.com/repos/lexarisa/alena/collaborators{/collaborator}',
teams_url: 'https://api.github.com/repos/lexarisa/alena/teams',
hooks_url: 'https://api.github.com/repos/lexarisa/alena/hooks',
issue_events_url: 'https://api.github.com/repos/lexarisa/alena/issues/events{/number}',
events_url: 'https://api.github.com/repos/lexarisa/alena/events',
assignees_url: 'https://api.github.com/repos/lexarisa/alena/assignees{/user}',
branches_url: 'https://api.github.com/repos/lexarisa/alena/branches{/branch}',
tags_url: 'https://api.github.com/repos/lexarisa/alena/tags',
blobs_url: 'https://api.github.com/repos/lexarisa/alena/git/blobs{/sha}',
git_tags_url: 'https://api.github.com/repos/lexarisa/alena/git/tags{/sha}',
git_refs_url: 'https://api.github.com/repos/lexarisa/alena/git/refs{/sha}',
trees_url: 'https://api.github.com/repos/lexarisa/alena/git/trees{/sha}',
statuses_url: 'https://api.github.com/repos/lexarisa/alena/statuses/{sha}',
languages_url: 'https://api.github.com/repos/lexarisa/alena/languages',
stargazers_url: 'https://api.github.com/repos/lexarisa/alena/stargazers',
contributors_url: 'https://api.github.com/repos/lexarisa/alena/contributors',
subscribers_url: 'https://api.github.com/repos/lexarisa/alena/subscribers',
subscription_url: 'https://api.github.com/repos/lexarisa/alena/subscription',
commits_url: 'https://api.github.com/repos/lexarisa/alena/commits{/sha}',
git_commits_url: 'https://api.github.com/repos/lexarisa/alena/git/commits{/sha}',
comments_url: 'https://api.github.com/repos/lexarisa/alena/comments{/number}',
issue_comment_url: 'https://api.github.com/repos/lexarisa/alena/issues/comments{/number}',
contents_url: 'https://api.github.com/repos/lexarisa/alena/contents/{+path}',
compare_url: 'https://api.github.com/repos/lexarisa/alena/compare/{base}...{head}',
merges_url: 'https://api.github.com/repos/lexarisa/alena/merges',
archive_url: 'https://api.github.com/repos/lexarisa/alena/{archive_format}{/ref}',
downloads_url: 'https://api.github.com/repos/lexarisa/alena/downloads',
issues_url: 'https://api.github.com/repos/lexarisa/alena/issues{/number}',
pulls_url: 'https://api.github.com/repos/lexarisa/alena/pulls{/number}',
milestones_url: 'https://api.github.com/repos/lexarisa/alena/milestones{/number}',
notifications_url: 'https://api.github.com/repos/lexarisa/alena/notifications{?since,all,participating}',
labels_url: 'https://api.github.com/repos/lexarisa/alena/labels{/name}',
releases_url: 'https://api.github.com/repos/lexarisa/alena/releases{/id}',
deployments_url: 'https://api.github.com/repos/lexarisa/alena/deployments',
created_at: 1651770754,
updated_at: '2022-05-05T17:12:34Z',
pushed_at: 1652178877,
git_url: 'git://github.com/lexarisa/alena.git',
ssh_url: 'git@github.com:lexarisa/alena.git',
clone_url: 'https://github.com/lexarisa/alena.git',
svn_url: 'https://github.com/lexarisa/alena',
homepage: null,
size: 71795,
stargazers_count: 0,
watchers_count: 0,
language: null,
has_issues: true,
has_projects: true,
has_downloads: true,
has_wiki: true,
has_pages: false,
forks_count: 0,
mirror_url: null,
archived: false,
disabled: false,
open_issues_count: 1,
license: null,
allow_forking: true,
is_template: false,
topics: [],
visibility: 'public',
forks: 0,
open_issues: 1,
watchers: 0,
default_branch: 'main',
stargazers: 0,
master_branch: 'main'
},
pusher: { name: 'lexarisa', email: 'lexarisaa@gmail.com' },
sender: {
login: 'lexarisa',
id: 76721322,
node_id: 'MDQ6VXNlcjc2NzIxMzIy',
avatar_url: 'https://avatars.githubusercontent.com/u/76721322?v=4',
gravatar_id: '',
url: 'https://api.github.com/users/lexarisa',
html_url: 'https://github.com/lexarisa',
followers_url: 'https://api.github.com/users/lexarisa/followers',
following_url: 'https://api.github.com/users/lexarisa/following{/other_user}',
gists_url: 'https://api.github.com/users/lexarisa/gists{/gist_id}',
starred_url: 'https://api.github.com/users/lexarisa/starred{/owner}{/repo}',
subscriptions_url: 'https://api.github.com/users/lexarisa/subscriptions',
organizations_url: 'https://api.github.com/users/lexarisa/orgs',
repos_url: 'https://api.github.com/users/lexarisa/repos',
events_url: 'https://api.github.com/users/lexarisa/events{/privacy}',
received_events_url: 'https://api.github.com/users/lexarisa/received_events',
type: 'User',
site_admin: false
},
installation: {
id: 25551568,
node_id: 'MDIzOkludGVncmF0aW9uSW5zdGFsbGF0aW9uMjU1NTE1Njg='
},
created: false,
deleted: true,
forced: false,
base_ref: null,
compare: 'https://github.com/lexarisa/alena/compare/eba951ff7be6...000000000000',
commits: [],
head_commit: null
},
_body: true,
length: undefined,
route: Route {
path: '/payload',
stack: [ [Layer] ],
methods: { post: true }
},
[Symbol(kCapture)]: false,
[Symbol(kHeaders)]: {
host: 'dcb2-45-130-134-153.eu.ngrok.io',
'user-agent': 'GitHub-Hookshot/db1e1da',
'content-length': '6071',
accept: '/',
'content-type': 'application/json',
'x-forwarded-for': '140.82.115.117',
'x-forwarded-proto': 'https',
'x-github-delivery': 'caaa0ca0-d04c-11ec-8a4e-92d603296d0c',
'x-github-event': 'push',
'x-github-hook-id': '357008294',
'x-github-hook-installation-target-id': '198267',
'x-github-hook-installation-target-type': 'integration',
'x-hub-signature': 'sha1=54d38374e0aeebe36e8e5169474ce52e0cf2a2e4',
'x-hub-signature-256': 'sha256=eafd6f334631e30bc442440c5ebc7e8952aaf9705eebe5cea03baebb45ef6c73',
'accept-encoding': 'gzip'
},
[Symbol(kHeadersCount)]: 30,
[Symbol(kTrailers)]: null,
[Symbol(kTrailersCount)]: 0,
[Symbol(RequestTimeout)]: undefined
}